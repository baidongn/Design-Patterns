网址： https://blog.csdn.net/jason0539/article/details/23020989
引言：
    1）还没有工厂时代：假如还没有工业革命，如果一个客户要一款宝马车,一般的做法是客户去创建一款宝马车，然后拿来用。
    2）简单工厂模式：后来出现工业革命。用户不用去创建宝马车。因为客户有一个工厂来帮他创建宝马.想要什么车，这个工厂就可以建。比如想要320i系列车。工厂就创建这个系列的车。即工厂可以创建产品。
    3）工厂方法模式时代：为了满足客户，宝马车系列越来越多，如320i，523i,30li等系列一个工厂无法创建所有的宝马系列。于是由单独分出来多个具体的工厂。每个具体工厂创建一种系列。即具体工厂类只能创建一个具体产品。但是宝马工厂还是个抽象。你需要指定某个具体的工厂才能生产车出来。
    4）抽象工厂模式时代：随着客户的要求越来越高，宝马车必须配置空调。于是这个工厂开始生产宝马车和需要的空调。
    最终是客户只要对宝马的销售员说：我要523i空调车，销售员就直接给他523i空调车了。而不用自己去创建523i空调车宝马车.
    这就是工厂模式。

分类：
   1）简单工厂模式（Simple Factory）
   2）工厂方法模式（Factory Method）
   3）抽象工厂模式（Abstract Factory）


  简单工厂：（组成）
           1) 工厂类角色：这是本模式的核心，含有一定的商业逻辑和判断逻辑，用来创建产品
           2) 抽象产品角色：它一般是具体产品继承的父类或者实现的接口。
           3) 具体产品角色：工厂类所创建的对象就是此角色的实例。在java中由一个具体类实现。
       缺点: 因为每增加一种新型车，都要在工厂类中增加相应的创建业务逻辑（createBMW(int type)方法需要新增case），这显然是违背开闭原则的。对于新产品的加入，工厂类是很被动的。(新增车型需要在工厂中添加对应 实现的业务逻辑，对工厂类的改动太大)
  工厂方法模式:(组成)
           1)抽象工厂角色： 这是工厂方法模式的核心，它与应用程序无关。是具体工厂角色必须实现的接口或者必须继承的父类。在java中它由抽象类或者接口来实现。
           2)具体工厂角色：它含有和具体业务逻辑有关的代码。由应用程序调用以创建对应的具体产品的对象。
           3)抽象产品角色：它是具体产品继承的父类或者是实现的接口。在java中一般有抽象类或者接口来实现。
           4)具体产品角色：具体工厂角色所创建的对象就是此角色的实例。在java中由具体的类来实现。

       优缺点：当有新的产品产生时，只要按照抽象产品角色、抽象工厂角色提供的合同来生成，那么就可以被客户使用，而不必去修改任何已有 的代码。但是，当产品种类非常多时，会出现大量的与之对应的工厂对象。（每一个对象，都要有一个对应的工厂）

  抽象工厂模式:(零件)
            相当于用 零件在拼接产品，工厂中存放产品，接口是零件的接口，在工厂中进行组合
            每一个具体工厂角色只负责某一个产品角色的实例化。每一个具体工厂类只负责创建抽象产品的某一个具体子类的实例。